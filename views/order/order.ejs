<%- include('../partials/header') %>

<style>
  body {
    background-color: #f5f2ef;
  }

  .menu-card {
    border: 1px solid #d8ccc4;
    border-radius: 12px;
    overflow: hidden;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
    box-shadow: 0 4px 8px rgba(102, 44, 33, 0.1);
    background-color: #fff;
  }

  .menu-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 6px 12px rgba(102, 44, 33, 0.15);
  }

  .menu-card img {
    height: 180px;
    object-fit: cover;
    width: 100%;
  }

  .menu-card .card-body {
    text-align: center;
    background-color: #fdfaf7;
    padding: 15px;
  }

  .menu-card .card-title {
    font-size: 1.2rem;
    font-weight: bold;
    color: #4b2b20;
  }

  .menu-card .card-text {
    font-size: 1rem;
    color: #5e473d;
  }

  .cart-table th,
  .cart-table td {
    text-align: center;
    vertical-align: middle;
    background-color: #fdfaf7;
    color: #4b2b20;
  }

  .cart-summary {
    font-weight: bold;
    font-size: 1.2rem;
    color: #4b2b20;
  }

  .search-bar {
    display: flex;
    align-items: center;
    margin-bottom: 20px;
    background-color: #f8f1ec;
    padding: 12px;
    border-radius: 10px;
    box-shadow: 0 2px 5px rgba(102, 44, 33, 0.05);
  }

  .search-bar input {
    flex: 1;
    padding: 10px;
    border: 1px solid #d8ccc4;
    border-radius: 6px;
    margin-right: 10px;
    font-size: 1rem;
    background-color: #fff;
  }

  .search-bar button {
    padding: 10px 20px;
    background-color: #662c21;
    color: white;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-size: 1rem;
    transition: background-color 0.3s ease;
  }

  .search-bar button:hover {
    background-color: #4e2119;
  }

  .btn-group .type-btn,
  .table-btn {
    margin: 4px;
    padding: 10px 15px;
    border-radius: 10px;
    font-size: 1rem;
    font-weight: bold;
    border: 2px solid #d8ccc4;
    background-color: #fff;
    color: #4b2b20;
    transition: all 0.3s ease;
  }

  .btn-group .type-btn.active,
  .table-btn.active {
    background-color: #662c21;
    color: white;
    border-color: #662c21;
  }

  .btn-group .type-btn:hover,
  .table-btn:hover {
    background-color: #4e2119;
    color: white;
    border-color: #4e2119;
  }

  h3,
  h4 {
    color: #662c21;
    font-weight: bold;
  }

  .btn-primary {
    background-color: #662c21;
    border-color: #662c21;
  }

  .btn-primary:hover {
    background-color: #4e2119;
    border-color: #4e2119;
  }

  #menuContainer {
    max-height: 700px;
    overflow-y: auto;
    padding-right: 10px;
  }

  /* Modal styles */
  .modal-content {
    border-radius: 10px;
    background-color: #fdfaf7;
  }

  .modal-header {
    background-color: #662c21;
    color: white;
    border-top-left-radius: 10px;
    border-top-right-radius: 10px;
  }

  .modal-title {
    font-weight: bold;
  }

  .modal-body {
    color: #4b2b20;
    font-size: 1.1rem;
    text-align: center;
  }

  .modal-footer .btn {
    background-color: #662c21;
    color: white;
    border: none;
  }

  .modal-footer .btn:hover {
    background-color: #4e2119;
  }
</style>

<body>
  <div class="container mt-4">
    <div class="row">
      <!-- Danh s√°ch m√≥n ƒÉn -->
      <div class="col-md-8">
        <h3 class="mb-4">üìú Menu - <span id="selectedTable">Ch·ªçn b√†n</span></h3>

        <!-- Thanh t√¨m ki·∫øm -->
        <div class="search-bar">
          <input type="text" id="searchInput" placeholder="üîç T√¨m ki·∫øm m√≥n ƒÉn..." />
          <button id="searchButton">T√¨m</button>
        </div>

        <!-- Ph√¢n lo·∫°i m√≥n -->
        <div class="mb-4">
          <div class="btn-group d-flex flex-wrap" role="group" aria-label="Ph√¢n lo·∫°i m√≥n">
            <button type="button" class="btn type-btn active flex-fill" data-type="all">T·∫•t c·∫£</button>
            <button type="button" class="btn type-btn flex-fill" data-type="c√† ph√™">‚òï C√† ph√™</button>
            <button type="button" class="btn type-btn flex-fill" data-type="tr√†">üßã Tr√† S·ªØa</button>
            <button type="button" class="btn type-btn flex-fill" data-type="b√°nh">üç∞ B√°nh</button>
            <button type="button" class="btn type-btn flex-fill" data-type="n∆∞·ªõc">ü•§ N∆∞·ªõc</button>
          </div>
        </div>

        <!-- Menu s·∫Ω render t·∫°i ƒë√¢y -->
        <div class="row row-cols-1 row-cols-md-2 g-4" id="menuContainer"></div>
      </div>

      <!-- Gi·ªè h√†ng -->
      <div class="col-md-4">
        <h3 class="mb-4">üõí Gi·ªè m√≥n</h3>
        <table class="table table-bordered cart-table">
          <thead class="table-dark">
            <tr>
              <th>M√≥n</th>
              <th>S·ªë l∆∞·ª£ng</th>
              <th>Th√†nh ti·ªÅn</th>
            </tr>
          </thead>
          <tbody id="cartItems">
            <tr>
              <td colspan="3" class="text-danger">üõçÔ∏è Gi·ªè h√†ng tr·ªëng.</td>
            </tr>
          </tbody>
        </table>
        <div class="d-flex justify-content-between cart-summary">
          <span>T·ªïng c·ªông:</span>
          <span id="totalPrice">0 VND</span>
        </div>
        <button class="btn btn-primary w-100 mt-3" id="orderButton">üßæ ƒê·∫∑t m√≥n</button>

         <!-- Ch·ªçn b√†n -->
    <div class="mt-5">
      <h4>ü™ë Ch·ªçn b√†n</h4>
      <div class="d-flex flex-wrap gap-2">
        <% for (let i = 1; i <= 12; i++) { %>
        <button class="btn table-btn flex-fill" data-table="<%= i %>">B√†n <%= i %></button>
        <% } %>
      </div>
    </div>
      </div>
    </div>

  </div>

  <!-- Modal th√¥ng b√°o -->
  <div class="modal fade" id="notificationModal" tabindex="-1" aria-labelledby="notificationModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="notificationModalLabel">Th√¥ng b√°o</h5>
          <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body" id="modalMessage">
          <!-- N·ªôi dung th√¥ng b√°o s·∫Ω ƒë∆∞·ª£c ch√®n v√†o ƒë√¢y -->
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-primary" data-bs-dismiss="modal">ƒê√≥ng</button>
        </div>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener("DOMContentLoaded", function () {
      const menuContainer = document.getElementById("menuContainer");
      const cartItems = document.getElementById("cartItems");
      const totalPrice = document.getElementById("totalPrice");
      const orderButton = document.getElementById("orderButton");
      const searchInput = document.getElementById("searchInput");
      const searchButton = document.getElementById("searchButton");
      const typeButtons = document.querySelectorAll(".type-btn");
      const tableButtons = document.querySelectorAll(".table-btn");
      const notificationModal = new bootstrap.Modal(document.getElementById("notificationModal"));
      const modalMessage = document.getElementById("modalMessage");
      let selectedTable = null;
      let cart = [];

      // H√†m hi·ªÉn th·ªã modal
      function showModal(message) {
        modalMessage.textContent = message;
        notificationModal.show();
      }

      // X·ª≠ l√Ω ch·ªçn b√†n
      tableButtons.forEach((button) => {
        button.addEventListener("click", function () {
          tableButtons.forEach((btn) => btn.classList.remove("active"));
          this.classList.add("active");
          selectedTable = this.getAttribute("data-table");
          document.getElementById("selectedTable").innerText = `B√†n ${selectedTable}`;
          fetch(`/order/menu/${selectedTable}`)
            .then((response) => response.json())
            .then((data) => renderMenu(data))
            .catch((error) => {
              console.error("L·ªói t·∫£i menu:", error);
              showModal("‚ùå L·ªói khi t·∫£i menu!");
            });
          fetchCart();
        });
      });

      // Hi·ªÉn th·ªã menu
      function renderMenu(menuItems) {
        menuContainer.innerHTML = "";
        if (!Array.isArray(menuItems) || menuItems.length === 0) {
          menuContainer.innerHTML = `<div class="col-12 text-danger text-center">‚ùå Kh√¥ng c√≥ m√≥n n√†o trong menu.</div>`;
          return;
        }
        menuItems.forEach((item) => {
          menuContainer.innerHTML += `
            <div class="col-md-4 mb-4">
              <div class="card menu-card">
                <img src="${item.image || '/public/image/default.jpg'}" class="card-img-top" alt="${item.name}">
                <div class="card-body">
                  <h5 class="card-title">${item.name}</h5>
                  <p class="card-text">${item.price.toLocaleString('vi-VN')} VND</p>
                  <div class="d-flex justify-content-center">
                    <input type="number" class="form-control text-center quantity" min="1" value="1" data-id="${item.id}" style="width: 80px;">
                  </div>
                  <button class="btn btn-primary btn-sm mt-2 add-to-cart" data-id="${item.id}" data-name="${item.name}" data-price="${item.price}">
                    Th√™m m√≥n
                  </button>
                </div>
              </div>
            </div>`;
        });

        document.querySelectorAll(".add-to-cart").forEach((button) => {
          button.addEventListener("click", async function () {
            if (!selectedTable) {
              showModal("Vui l√≤ng ch·ªçn b√†n tr∆∞·ªõc khi th√™m m√≥n!");
              return;
            }

            const itemId = this.getAttribute("data-id");
            const quantityInput = document.querySelector(`.quantity[data-id='${itemId}']`);
            const quantity = quantityInput ? parseInt(quantityInput.value, 10) : 1;

            if (isNaN(quantity) || quantity <= 0) {
              showModal("S·ªë l∆∞·ª£ng ph·∫£i l√† s·ªë d∆∞∆°ng!");
              return;
            }

            try {
              const response = await fetch("/order/add", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ itemId, quantity, tableNumber: selectedTable }),
              });
              const result = await response.json();

              if (result.success) {
                showModal(result.message);
                updateCart(result.order);
              } else {
                showModal("‚ùå L·ªói: " + result.error);
              }
            } catch (error) {
              console.error("‚ùå L·ªói khi th√™m m√≥n:", error);
              showModal("‚ùå L·ªói m√°y ch·ªß!");
            }
          });
        });
      }

      // L·∫•y gi·ªè h√†ng t·ª´ server
      async function fetchCart() {
        if (!selectedTable) return;
        try {
          const response = await fetch(`/order/${selectedTable}`);
          if (response.ok) {
            const order = await response.json();
            updateCart(order);
          } else {
            cart = [];
            renderCart();
          }
        } catch (error) {
          console.error("‚ùå L·ªói khi t·∫£i gi·ªè h√†ng:", error);
          cart = [];
          renderCart();
        }
      }

      // C·∫≠p nh·∫≠t gi·ªè h√†ng
      function updateCart(order) {
        cart = order.items || [];
        renderCart();
      }

      // Hi·ªÉn th·ªã gi·ªè h√†ng
      function renderCart() {
        cartItems.innerHTML = "";
        let total = 0;
        if (cart.length === 0) {
          cartItems.innerHTML = `<tr><td colspan="3" class="text-danger">üõçÔ∏è Gi·ªè h√†ng tr·ªëng.</td></tr>`;
        } else {
          cart.forEach((item) => {
            const itemTotal = item.price * item.quantity;
            total += itemTotal;
            cartItems.innerHTML += `
              <tr>
                <td>${item.name}</td>
                <td>${item.quantity}</td>
                <td>${itemTotal.toLocaleString('vi-VN')} VND</td>
              </tr>`;
          });
        }
        totalPrice.textContent = `${total.toLocaleString('vi-VN')} VND`;
      }

      // X·ª≠ l√Ω n√∫t "Order"
      orderButton.addEventListener("click", async function () {
        if (!selectedTable) {
          showModal("Vui l√≤ng ch·ªçn b√†n tr∆∞·ªõc khi ƒë·∫∑t m√≥n!");
          return;
        }
        if (cart.length === 0) {
          showModal("‚ùå Gi·ªè h√†ng tr·ªëng. Vui l√≤ng th√™m m√≥n!");
          return;
        }
        try {
          const response = await fetch(`/order/submit/${selectedTable}`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
          });
          const result = await response.json();
          if (result.success) {
            showModal("‚úÖ ƒê·∫∑t m√≥n th√†nh c√¥ng!");
            cart = [];
            renderCart();
          } else {
            showModal("‚ùå L·ªói khi ƒë·∫∑t m√≥n: " + result.error);
          }
        } catch (error) {
          console.error("‚ùå L·ªói khi g·ª≠i ƒë∆°n h√†ng:", error);
          showModal("‚ùå L·ªói m√°y ch·ªß!");
        }
      });

      // X·ª≠ l√Ω t√¨m ki·∫øm
      // X·ª≠ l√Ω t√¨m ki·∫øm
      searchButton.addEventListener("click", function () {
  const query = searchInput.value.toLowerCase();
  const cards = document.querySelectorAll(".menu-card");

  cards.forEach((card) => {
    const name = card.querySelector("h5").textContent.toLowerCase();

    // Thay v√¨ d√πng display: none, ta th√™m/l·∫•y class 'd-none' c·ªßa Bootstrap
    if (name.includes(query)) {
      card.classList.remove("d-none");
    } else {
      card.classList.add("d-none");
    }
  });
});

      // X·ª≠ l√Ω nh·∫•n Enter ƒë·ªÉ t√¨m ki·∫øm 
      searchInput.addEventListener("keypress", function (event) {
        if (event.key === "Enter") {
          searchButton.click();
        }
      });


      // X·ª≠ l√Ω ph√¢n lo·∫°i m√≥n
      typeButtons.forEach((button) => {
        button.addEventListener("click", function () {
          typeButtons.forEach((btn) => btn.classList.remove("active"));
          this.classList.add("active");
          const selectedType = this.getAttribute("data-type");
          fetchMenuByType(selectedType);
        });
      });

      // L·∫•y danh s√°ch m√≥n theo lo·∫°i
      async function fetchMenuByType(type) {
        try {
          const response = await fetch(type === "all" ? `/order/menu/${selectedTable || '1'}` : `/order/menu/type/${type}`);
          const menuItems = await response.json();
          renderMenu(menuItems);
        } catch (error) {
          console.error("‚ùå L·ªói khi t·∫£i menu:", error);
          showModal("‚ùå L·ªói khi t·∫£i menu!");
        }
      }

      // T·∫£i t·∫•t c·∫£ m√≥n khi trang ƒë∆∞·ª£c load
      fetchMenuByType("all");
    });
  </script>

  <%- include('../partials/footer') %>
</body>