<%- include('../partials/header') %>

<style>
  .menu-card {
      border: 1px solid #ddd;
      border-radius: 8px;
      overflow: hidden;
      transition: transform 0.2s;
  }

  .menu-card:hover {
      transform: scale(1.05);
  }

  .menu-card img {
      height: 150px;
      object-fit: cover;
  }

  .menu-card .card-body {
      text-align: center;
  }

  .cart-table th, .cart-table td {
      text-align: center;
      vertical-align: middle;
  }

  .cart-summary {
      font-weight: bold;
      font-size: 1.2rem;
  }

  .search-bar {
      display: flex;
      align-items: center;
      margin-bottom: 20px;
  }

  .search-bar input {
      flex: 1;
      padding: 10px;
      border: 1px solid #ccc;
      border-radius: 5px;
      margin-right: 10px;
  }

  .search-bar button {
      padding: 10px 20px;
      background-color: #662c21;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
  }

  .btn-group .type-btn {
      margin-right: 5px;
  }

  .btn-group .type-btn.active {
      background-color: #662c21;
      color: white;
      border-color: #662c21;
  }


  .btn-group .type-btn {
    margin-right: 5px;
    text-align: center;
    font-weight: bold;
    padding: 10px 15px;
    border-radius: 8px;
    transition: all 0.3s ease;
    color: black; /* M√†u ch·ªØ m·∫∑c ƒë·ªãnh */
    border: 2px solid #854d3c; /* Vi·ªÅn m·∫∑c ƒë·ªãnh */
    background-color: white; /* N·ªÅn m·∫∑c ƒë·ªãnh */
  }

  .btn-group .type-btn:last-child {
    margin-right: 0; /* X√≥a kho·∫£ng c√°ch n√∫t cu·ªëi */
  }

  .btn-group .type-btn.active {
    background-color: #662c21;
    color: white;
    border-color: #662c21;
  }

  .btn-group .type-btn:hover {
    background-color: #854d3c;
    color: white;
    border-color: #854d3c;
  }

  .btn-group .type-btn,
  .table-btn {
    margin-right: 5px;
    text-align: center;
    font-weight: bold;
    padding: 10px 15px;
    border-radius: 8px;
    transition: all 0.3s ease;
    color: black; /* M√†u ch·ªØ m·∫∑c ƒë·ªãnh */
    border: 2px solid #854d3c; /* Vi·ªÅn m·∫∑c ƒë·ªãnh */
    background-color: white; /* N·ªÅn m·∫∑c ƒë·ªãnh */
  }

  .btn-group .type-btn:last-child,
  .table-btn:last-child {
    margin-right: 0; /* X√≥a kho·∫£ng c√°ch n√∫t cu·ªëi */
  }

  .btn-group .type-btn.active,
  .table-btn.active {
    background-color: #662c21;
    color: white;
    border-color: #662c21;
  }

  .btn-group .type-btn:hover,
  .table-btn:hover {
    background-color: #854d3c;
    color: white;
    border-color: #854d3c;
  }
</style>

<div class="container mt-4">
  <div class="row">
    <!-- Danh s√°ch m√≥n ƒÉn -->
    <div class="col-md-8">
      <h3 class="mb-4">üìú Menu - <span id="selectedTable">Ch·ªçn b√†n</span></h3>

      <!-- Thanh t√¨m ki·∫øm -->
      <div class="search-bar">
        <input type="text" id="searchInput" placeholder="Nh·∫≠p m√£/T√™n m√≥n c·∫ßn t√¨m">
        <button id="searchButton">üîç T√¨m ki·∫øm</button>
      </div>

      <!-- Ph√¢n lo·∫°i m√≥n -->
      <div class="mb-4">
        <div class="btn-group" role="group" aria-label="Ph√¢n lo·∫°i m√≥n">
          <button type="button" class="btn btn-outline-primary type-btn active flex-fill" data-type="all">T·∫•t c·∫£</button>
          <button type="button" class="btn btn-outline-primary type-btn" data-type="c√† ph√™">C√† ph√™</button>
          <button type="button" class="btn btn-outline-primary type-btn" data-type="tr√†">Tr√†</button>
          <button type="button" class="btn btn-outline-primary type-btn" data-type="b√°nh">B√°nh</button>
          <button type="button" class="btn btn-outline-primary type-btn" data-type="n∆∞·ªõc">N∆∞·ªõc</button>
        </div>
      </div>
      <div class="row" id="menuContainer">
        <div class="col-12 text-danger">
          Vui l√≤ng ch·ªçn b√†n ƒë·ªÉ hi·ªÉn th·ªã menu.
        </div>
      </div>
    </div>

    <!-- Gi·ªè h√†ng -->
    <div class="col-md-4">
      <h3 class="mb-4">üõí Danh s√°ch g·ªçi m√≥n</h3>
      <table class="table table-bordered cart-table">
        <thead class="table-dark">
          <tr>
            <th>T√™n m√≥n</th>
            <th>S·ªë l∆∞·ª£ng</th>
            <th>Th√†nh ti·ªÅn</th>
          </tr>
        </thead>
        <tbody id="cartItems">
          <% orders.forEach(order => { %>
              <% order.items.forEach(item => { %>
                  <tr>
                      <td><%= item.name %></td>
                      <td><%= item.quantity %></td>
                      <td><%= (item.price * item.quantity).toLocaleString('vi-VN') %> VND</td>
                  </tr>
              <% }) %>
          <% }) %>
        </tbody>
      </table>
      <div class="d-flex justify-content-between cart-summary">
        <span>T·ªïng ti·ªÅn:</span>
        <span id="totalPrice">0 VND</span>
      </div>
      <button class="btn w-100 mt-3" id="orderButton" style="background-color: #662c21; color: white;">Order</button>
    </div>
  </div>

  <!-- Ch·ªçn b√†n -->
  <div class="mt-5">
    <h4>ü™ë Ch·ªçn b√†n</h4>
    <div class="d-flex flex-wrap gap-2">
      <% for (let i = 1; i <= 12; i++) { %>
      <button class="btn btn-outline-primary table-btn flex-fill" data-table="<%= i %>">
        B√†n <%= i %>
      </button>
      <% } %>
    </div>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", function () {
  const menuContainer = document.getElementById("menuContainer");
  const cartItems = document.getElementById("cartItems");
  const totalPrice = document.getElementById("totalPrice");
  const orderButton = document.getElementById("orderButton");
  const searchInput = document.getElementById("searchInput");
  const searchButton = document.getElementById("searchButton");
  const typeButtons = document.querySelectorAll(".type-btn");
  const tableButtons = document.querySelectorAll(".table-btn"); // Th√™m d√≤ng n√†y
  let cart = [];

  // X·ª≠ l√Ω ch·ªçn b√†n
  tableButtons.forEach((button) => {
    button.addEventListener("click", function () {
      // X√≥a class 'active' kh·ªèi t·∫•t c·∫£ c√°c n√∫t b√†n
      tableButtons.forEach((btn) => btn.classList.remove("active"));

      // Th√™m class 'active' v√†o n√∫t ƒë∆∞·ª£c nh·∫•n
      this.classList.add("active");

      // L·∫•y s·ªë b√†n t·ª´ thu·ªôc t√≠nh data-table
      const tableNumber = this.getAttribute("data-table");
      document.getElementById("selectedTable").innerText = `B√†n ${tableNumber}`;

      // G·ªçi API ƒë·ªÉ t·∫£i menu c·ªßa b√†n ƒë∆∞·ª£c ch·ªçn
      fetch(`/order/menu/${tableNumber}`)
        .then((response) => response.json())
        .then((data) => {
          renderMenu(data);
        })
        .catch((error) => console.error("L·ªói t·∫£i menu:", error));
    });
  });

  // Hi·ªÉn th·ªã menu
  function renderMenu(menuItems) {
    menuContainer.innerHTML = "";

    if (!Array.isArray(menuItems) || menuItems.length === 0) {
      menuContainer.innerHTML = `<div class="col-12 text-danger">‚ùå Kh√¥ng c√≥ m√≥n n√†o trong menu.</div>`;
      return;
    }

    menuItems.forEach((item) => {
      menuContainer.innerHTML += `
        <div class="col-md-4 mb-4">
          <div class="card menu-card">
            <img src="${item.image || '/public/image/default.jpg'}" class="card-img-top" alt="${item.name}">
            <div class="card-body">
              <h5 class="card-title">${item.name}</h5>
              <p class="card-text">${item.price.toLocaleString('vi-VN')} VND</p>
              <div class="d-flex justify-content-center">
                <input type="number" class="form-control text-center quantity" min="1" value="1" data-id="${item._id}" style="width: 80px;">
              </div>
              <button class="btn btn-primary btn-sm mt-2 add-to-cart" data-id="${item._id}" data-name="${item.name}" data-price="${item.price}">
                ‚ûï Th√™m
              </button>
            </div>
          </div>
        </div>`;
    });

    document.querySelectorAll(".add-to-cart").forEach((button) => {
      button.addEventListener("click", function () {
        const itemId = this.getAttribute("data-id");
        const quantityInput = document.querySelector(`.quantity[data-id='${itemId}']`);
        const quantity = quantityInput ? parseInt(quantityInput.value, 10) : 1;

        const item = menuItems.find((item) => item._id === itemId);
        if (item) {
          addToCart(item, quantity);
        }
      });
    });
  }

  // X·ª≠ l√Ω t√¨m ki·∫øm
  searchButton.addEventListener("click", function () {
    const query = searchInput.value.toLowerCase();
    const cards = document.querySelectorAll(".menu-card");
    cards.forEach((card) => {
      const name = card.querySelector("h5").textContent.toLowerCase();
      if (name.includes(query)) {
        card.style.display = "block";
      } else {
        card.style.display = "none";
      }
    });
  });

  // X·ª≠ l√Ω s·ª± ki·ªán khi nh·∫•n n√∫t ph√¢n lo·∫°i
  typeButtons.forEach((button) => {
    button.addEventListener("click", function () {
      // X√≥a class 'active' kh·ªèi t·∫•t c·∫£ c√°c n√∫t
      typeButtons.forEach((btn) => btn.classList.remove("active"));

      // Th√™m class 'active' v√†o n√∫t ƒë∆∞·ª£c nh·∫•n
      this.classList.add("active");

      // L·∫•y lo·∫°i m√≥n t·ª´ thu·ªôc t√≠nh data-type
      const selectedType = this.getAttribute("data-type");

      // G·ªçi h√†m fetchMenuByType ƒë·ªÉ t·∫£i danh s√°ch m√≥n
      fetchMenuByType(selectedType);
    });
  });

  // Th√™m m√≥n v√†o gi·ªè h√†ng
  function addToCart(item, quantity) {
    const existingItem = cart.find((cartItem) => cartItem._id === item._id);
    if (existingItem) {
      existingItem.quantity += quantity; // C·ªông d·ªìn s·ªë l∆∞·ª£ng n·∫øu m√≥n ƒë√£ c√≥ trong gi·ªè
    } else {
      cart.push({ ...item, quantity }); // Th√™m m√≥n m·ªõi v√†o gi·ªè
    }
    renderCart(); // C·∫≠p nh·∫≠t giao di·ªán gi·ªè h√†ng
  }

  // Hi·ªÉn th·ªã gi·ªè h√†ng
  function renderCart() {
    cartItems.innerHTML = ""; // X√≥a n·ªôi dung c≈© trong gi·ªè h√†ng
    let total = 0; // Bi·∫øn l∆∞u t·ªïng ti·ªÅn

    // Duy·ªát qua t·ª´ng m√≥n trong gi·ªè h√†ng
    cart.forEach((item) => {
      const itemTotal = item.price * item.quantity; // T√≠nh th√†nh ti·ªÅn cho t·ª´ng m√≥n
      total += itemTotal; // C·ªông v√†o t·ªïng ti·ªÅn

      // Th√™m d√≤ng hi·ªÉn th·ªã m√≥n v√†o b·∫£ng gi·ªè h√†ng
      cartItems.innerHTML += `
        <tr>
          <td>${item.name}</td>
          <td>${item.quantity}</td>
          <td>${itemTotal.toLocaleString('vi-VN')} VND</td>
        </tr>`;
    });

    // N·∫øu gi·ªè h√†ng tr·ªëng, hi·ªÉn th·ªã th√¥ng b√°o
    if (cart.length === 0) {
      cartItems.innerHTML = `<tr><td colspan="3" class="text-danger">Gi·ªè h√†ng tr·ªëng.</td></tr>`;
    }

    // C·∫≠p nh·∫≠t t·ªïng ti·ªÅn hi·ªÉn th·ªã
    totalPrice.textContent = `${total.toLocaleString('vi-VN')} VND`;
  }

  // X·ª≠ l√Ω n√∫t "Order"
  orderButton.addEventListener("click", function () {
    if (cart.length === 0) {
      alert("‚ùå Gi·ªè h√†ng tr·ªëng. Vui l√≤ng th√™m m√≥n!");
      return;
    }

    fetch("/order/submit", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ cart }),
    })
      .then((response) => response.json())
      .then((data) => {
        if (data.success) {
          alert("‚úÖ ƒê·∫∑t m√≥n th√†nh c√¥ng!");
          cart = [];
          renderCart();
        } else {
          alert("‚ùå L·ªói khi ƒë·∫∑t m√≥n: " + data.error);
        }
      })
      .catch((error) => console.error("‚ùå L·ªói khi g·ª≠i ƒë∆°n h√†ng:", error));
  });

  // L·∫•y danh s√°ch m√≥n theo type
  async function fetchMenuByType(type) {
    try {
      const response = await fetch(type === "all" ? "/order/menu/all" : `/order/menu/type/${type}`);
      const menuItems = await response.json();

      renderMenu(menuItems); // S·ª≠ d·ª•ng h√†m renderMenu ƒë√£ c√≥
    } catch (error) {
      console.error("‚ùå L·ªói khi t·∫£i menu:", error);
    }
  }

  // T·∫£i t·∫•t c·∫£ m√≥n khi trang ƒë∆∞·ª£c load
  fetchMenuByType("all");
});
</script>

<%- include('../partials/footer') %>